---
parser: babel-eslint
"plugins": [ "eslint-plugin-react" ]

# 0 never, 2 always

env:
    browser: true
    # node: true

rules:

    # Disallow Use of console
    #
    # http://eslint.org/docs/rules/no-console.html
    no-console: 1

    # space befor block
    #
    # http://eslint.org/docs/rules/space-before-blocks.html
    space-before-blocks: 2

    # 2 space indent
    #
    # http://eslint.org/docs/rules/indent.html
    indent: [2, 2, indentSwitchCase: true]

    # Bracer style
    #
    # http://eslint.org/docs/rules/brace-style.html
    brace-style: 2

    # Require space after keywords
    #
    # http://eslint.org/docs/rules/space-after-keywords.html
    space-after-keywords: 2

    # Force `use strict`
    #
    # http://eslint.org/docs/rules/strict.html
    strict: 0

    # Disallow trailing commas
    #
    # http://eslint.org/docs/rules/comma-dangle.html
    comma-dangle: 0

    # Disallow Unused Expressions
    #
    # http://eslint.org/docs/rules/no-unused-expressions.html
    no-unused-expressions: 2

    # Treat var as Block Scoped
    #
    # http://eslint.org/docs/rules/block-scoped-var.html
    block-scoped-var: 2

    # Require file to end with single newline
    #
    # http://eslint.org/docs/rules/eol-last.html
    eol-last: 2

    # Require Dot Notation
    #
    # http://eslint.org/docs/rules/dot-notation.html
    dot-notation: 2

    # Require Consistent Returns
    #
    # http://eslint.org/docs/rules/consistent-return.html
    consistent-return: 2

    # Disallow Unused Variables
    #
    # http://eslint.org/docs/rules/no-unused-vars.html
    no-unused-vars: [2, args: none]

    # Enforce Quote Style
    #
    # http://eslint.org/docs/rules/quotes.html
    quotes: [1, "double", "avoid-escape"]

    # Require Following Curly Brace Conventions
    #
    # http://eslint.org/docs/rules/curly.html
    # curly: 2

    # Disallow spaces before function parentheses
    #
    # http://eslint.org/docs/rules/space-before-function-parentheses.html
    space-before-function-parentheses: 0

    # Validates JSDoc comments are syntactically correct
    #
    # http://eslint.org/docs/rules/valid-jsdoc.html
    valid-jsdoc: [2, { 'requireReturnDescription': false }]

    # Ensures that the results of typeof are compared against a valid string
    #
    # http://eslint.org/docs/rules/valid-typeof.html
    valid-typeof: 2

    # Disallow Shadowing of Restricted Names
    #
    # http://eslint.org/docs/rules/no-shadow-restricted-names.html
    no-shadow-restricted-names: 2

    # Allow Early Use
    #
    # http://eslint.org/docs/rules/no-use-before-define.html
    no-use-before-define: 0

    # DISABLED. Allow dangling underscores in identifiers, used in 3rd party
    # liberies.
    #
    # http://eslint.org/docs/rules/no-underscore-dangle.htmlquot
    no-underscore-dangle: 0

    # We pass constructors around / access them from members
    # new-cap: 0

    # We do this a lot.
    # no-use-before-define: 0

    # DISABLED. These currently cause errors when running.
    no-multi-spaces: 2

    # WARNINGS This is the only one that's hard to track since we don't lint just changes.
    max-len: [1, 80]

    # Disallow spaces inside of parentheses
    #
    # http://eslint.org/docs/rules/space-in-parens.html
    space-in-parens: 2

    # You want to enforce that semicolons are never used
    #
    # http://eslint.org/docs/rules/semi.html
    semi: [2, "never"]


################################################################################
# Plugins
################################################################################

    # Prevent variables used in JSX to be incorrectly marked as unused (jsx-uses-vars)
    #
    # https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-uses-vars.md
    "react/jsx-uses-vars": 1
